<!DOCTYPE HTML>

<html>

<head> <meta http-equiv="content-type" content="text/html; charset=UTF-8">

  <title>SVG sidekick - Simply Create Elegant SVG Drawings </title>
  <script type="text/javascript" src="highlight.pack.js"></script>
  <script type="text/javascript" src="highlightCode.js"></script>
  <link href='highlight.css' rel='stylesheet' />
  <link rel="shortcut icon" href="Images/favicon.ico" type="image/x-icon">


<script charset="UTF-8" type="text/javascript" src="js00_utility/iframeSelection.js"></script>
<script charset="UTF-8" type="text/javascript" src="js00_utility/color.js"></script>
<script charset="UTF-8" type="text/javascript" src="js00_utility/pathSeg.js"></script>
<script charset="UTF-8" type="text/javascript" src="js00_utility/select.js"></script>
<script charset="UTF-8" type="text/javascript" src="js00_utility/helperFuncts.js"></script>
<script charset="UTF-8" type="text/javascript" src="js00_utility/print.js"></script>
<script charset="UTF-8" type="text/javascript" src="js00_utility/zoom.js"></script>
<script charset="UTF-8" type="text/javascript" src="js01_start/jquery2.js"></script>
<script charset="UTF-8" type="text/javascript" src="js01_start/initD3Svg.js"></script>
<script charset="UTF-8" type="text/javascript" src="js01_start/grid.js"></script>
<script charset="UTF-8" type="text/javascript" src="js02_location/cursorLoc.js"></script>
<script charset="UTF-8" type="text/javascript" src="js02_location/transformAdd.js"></script>
<script charset="UTF-8" type="text/javascript" src="js04_svgSource/handleSource.js"></script>
<script charset="UTF-8" type="text/javascript" src="js04_svgSource/showSource.js"></script>
<script  charset="UTF-8" type="text/javascript" src="d3.v4.min.js"></script>
    <script charset="UTF-8" type="text/javascript" src="js03_drag/dragObjZoom.js"></script>

 <style type="text/css">

  .noselect {
      /*---prevent text element focus under create/edit elements---*/
-webkit-touch-callout: none; /* iOS Safari */
-webkit-user-select: none; /* Safari */
-khtml-user-select: none; /* Konqueror HTML */
-moz-user-select: none; /* Firefox */
-ms-user-select: none; /* Internet Explorer/Edge */
user-select: none; /* Non-prefixed version, currently supported by Chrome and Opera */
unselectable="on"
onselectstart="return false;"
onmousedown="return false;"
 }

 </style>

</head>

<body style='font-family:arial' >

<DIV id=containerDiv  style=position:absolute;top:40px;left:0px >
<TABLE>
 <TR>
 <TD valign=top>
 <DIV ID="iframeDiv" style='position:relative;top:0px;left:0px;width:400px'>
<div id=addElemIconFrameDiv style='padding:10px;border-radius:10px;position:fixed;visibility:hidden;width:1px;height:1px;overflow:hidden'><iframe id=addElemIconFrame style='border-width:0px;height:1px;overflow:hidden;'   scrolling='no' frameborder='0'   ></iframe></div>
	<script charset="UTF-8" type="text/javascript" src="AddElem/Icon/drawIcon.js"></script>
    <script charset="UTF-8" type="text/javascript" src="js03_drag/dragObjIcon.js"></script>
<div id=addElemCircleFrameDiv style='padding:10px;border-radius:10px;position:fixed;visibility:hidden;width:1px;height:1px;overflow:hidden'><iframe id=addElemCircleFrame style='border-width:0px;height:1px;overflow:hidden;'   scrolling='no' frameborder='0'   ></iframe></div>
	<script charset="UTF-8" type="text/javascript" src="AddElem/Circle/drawCircle.js"></script>
    <script charset="UTF-8" type="text/javascript" src="js03_drag/dragObjCircle.js"></script>
<div id=addElemArcFrameDiv style='padding:10px;border-radius:10px;position:fixed;visibility:hidden;width:1px;height:1px;overflow:hidden'><iframe id=addElemArcFrame style='border-width:0px;height:1px;overflow:hidden;'   scrolling='no' frameborder='0'   ></iframe></div>
	<script charset="UTF-8" type="text/javascript" src="AddElem/Arc/drawArc.js"></script>
    <script charset="UTF-8" type="text/javascript" src="js03_drag/dragObjArc.js"></script>
<div id=addElemEllipseFrameDiv style='padding:10px;border-radius:10px;position:fixed;visibility:hidden;width:1px;height:1px;overflow:hidden'><iframe id=addElemEllipseFrame style='border-width:0px;height:1px;overflow:hidden;'   scrolling='no' frameborder='0'   ></iframe></div>
	<script charset="UTF-8" type="text/javascript" src="AddElem/Ellipse/drawEllipse.js"></script>
    <script charset="UTF-8" type="text/javascript" src="js03_drag/dragObjEllipse.js"></script>
<div id=addElemRectFrameDiv style='padding:10px;border-radius:10px;position:fixed;visibility:hidden;width:1px;height:1px;overflow:hidden'><iframe id=addElemRectFrame style='border-width:0px;height:1px;overflow:hidden;'   scrolling='no' frameborder='0'   ></iframe></div>
	<script charset="UTF-8" type="text/javascript" src="AddElem/Rect/drawRect.js"></script>
    <script charset="UTF-8" type="text/javascript" src="js03_drag/dragObjRect.js"></script>
<div id=addElemTextFrameDiv style='padding:10px;border-radius:10px;position:fixed;visibility:hidden;width:1px;height:1px;overflow:hidden'><iframe id=addElemTextFrame style='border-width:0px;height:1px;overflow:hidden;'   scrolling='no' frameborder='0'   ></iframe></div>
	<script charset="UTF-8" type="text/javascript" src="AddElem/Text/drawText.js"></script>
    <script charset="UTF-8" type="text/javascript" src="js03_drag/dragObjText.js"></script>
<div id=addElemPathFrameDiv  style='padding:10px;border-radius:10px;position:fixed;visibility:hidden;width:1px;height:1px;overflow:hidden'><iframe id=addElemPathFrame style='border-width:0px;height:1px;overflow:hidden;'   scrolling='no' frameborder='0'   ></iframe></div>
	<script charset="UTF-8" type="text/javascript" src="AddElem/Path/drawPath.js"></script>
	<script charset="UTF-8" type="text/javascript" src="AddElem/Path/drawPathButton.js"></script>
	<script charset="UTF-8" type="text/javascript" src="js03_drag/dragPathPoint.js"></script>
	<script charset="UTF-8" type="text/javascript" src="js03_drag/dragAddPath.js"></script>
<div id=addElemPathEditFrameDiv style='padding:10px;border-radius:10px;position:fixed;visibility:hidden;width:1px;height:1px;overflow:hidden'><iframe id=addElemPathEditFrame style='border-width:0px;height:1px;overflow:hidden;'   scrolling='no' frameborder='0'   ></iframe></div>
	<script charset="UTF-8" type="text/javascript" src="AddElem/Path/drawPathEdit.js"></script>
	<script charset="UTF-8" type="text/javascript" src="AddElem/Path/drawPathEditButton.js"></script>
	<script charset="UTF-8" type="text/javascript" src="js03_drag/dragPathPointEdit.js"></script>
	<script charset="UTF-8" type="text/javascript" src="js03_drag/dragPathEdit.js"></script>
<div id=addElemPgonFrameDiv style='padding:10px;border-radius:10px;position:fixed;visibility:hidden;width:1px;height:1px;overflow:hidden'><iframe id=addElemPgonFrame style='border-width:0px;height:1px;overflow:hidden;'   scrolling='no' frameborder='0'   ></iframe></div>
<div id=addElemPgonEditFrameDiv style='padding:10px;border-radius:10px;position:fixed;visibility:hidden;width:1px;height:1px;overflow:hidden'><iframe id=addElemPgonEditFrame style='border-width:0px;height:1px;overflow:hidden;'   scrolling='no' frameborder='0'   ></iframe></div>
	<script charset="UTF-8" type="text/javascript" src="AddElem/Pgon/drawPgon.js"></script>
	<script charset="UTF-8" type="text/javascript" src="js03_drag/dragObjPgon.js"></script>
<div id=addElemTextureFrameDiv style='padding:10px;border-radius:10px;position:fixed;visibility:hidden;width:1px;height:1px;overflow:hidden'><iframe id=addElemTextureFrame style='border-width:0px;height:1px;overflow:hidden;'   scrolling='no' frameborder='0'   ></iframe></div>
	<script charset="UTF-8" type="text/javascript" src="AddElem/Texture/drawTexture.js"></script>
	<script charset="UTF-8" type="text/javascript" src="AddElem/Texture/textures.js"></script>
<div id=addElemGradientFrameDiv style='border-radius:10px;position:fixed;visibility:hidden;width:1px;height:1px;overflow:hidden'><iframe id=addElemGradientFrame style='border-width:0px;height:1px;overflow:hidden;'   scrolling='no' frameborder='0'   ></iframe></div>
	<script charset="UTF-8" type="text/javascript" src="AddElem/Gradient/drawGradient.js"></script>
<div id=addElemPolygonFrameDiv style='padding:10px;border-radius:10px;position:fixed;visibility:hidden;width:1px;height:1px;overflow:hidden'><iframe id=addElemPolygonFrame style='border-width:0px;height:1px;overflow:hidden;'   scrolling='no' frameborder='0'   ></iframe></div>
	<script charset="UTF-8" type="text/javascript" src="AddElem/Polygon/drawPolygon.js"></script>
	<script charset="UTF-8" type="text/javascript" src="js03_drag/dragObjPolygon.js"></script>
<div id=addElemBGimageFrameDiv style='padding:10px;border-radius:10px;position:fixed;visibility:hidden;width:1px;height:1px;overflow:hidden'><iframe id=addElemBGimageFrame style='border-width:0px;height:1px;overflow:hidden;'   scrolling='no' frameborder='0'   ></iframe></div>
	<script charset="UTF-8" type="text/javascript" src="AddElem/BGimage/drawBGimage.js"></script>
    <script charset="UTF-8" type="text/javascript" src="js03_drag/dragObjBGimage.js"></script>

 </DIV>

 </TD>
 <TD>
<div id=svgDiv style="border:1px solid black;width:800px;height:560px">
<svg id=mySVG width=800 height=560 viewBox="0 0 800 560" style="cursor:default">
    <style type="text/css" >
<![CDATA[
.grid line {
stroke: lightgrey;
stroke-opacity: 0.7;
shape-rendering: crispEdges;
}
.grid path {
stroke-width: 0;
}

]]>
</style>
</svg>
</div>
<center>  (To edit an element, <b>click right-mouse button</b> when the cursor is over the element.)
<p></p>
 Drawing Width:<input type="text" value=800 id=svgWidthValue style='width:40px' />
 Drawing Height:<input type="text" value=560 id=svgHeightValue style='width:40px' />&nbsp;<button id=setSVGSizeButton onClick=setSVGSizeButtonClicked() title="Set SVG drawing size">set</button>

<TABLE><TR>
 <TD> <button title="Show current drawing's SVG source" onClick=svgCopy()>SVG Source</button>  <button title="Copy SVG for other applications" onClick=publishSVG()>Publish</button>
 <button id=clearButton title="Clear current SVG drawing"  onClick=clearButtonClicked() >Clear/Start Over</button>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </TD>
<TD>
<table>
    <tr>
        <td>Save SVG As:</td>
        <td><input id="inputFileNameToSaveAs" placeholder="Include your fileName.svg"></input></td>
        <td><button Title="Save current drawing to your computer" onclick="saveSvgAsFile()">save</button></td>
    </tr>
 </table>
</TD>
 <TD>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
 <button title="Edit an existing SVG sidekick drawing" onClick=openExistingSVG()>Existing<br>SVG</button></TD>
</TR>
<TR>
<TD COLSPAN=3 ALIGN=CENTER>    <div class="copy"  id=existingSVGDiv style="display:none">
<textarea id=existingSVGValue placeholder="Paste existing SVG Sidekick svg source here..." style=width:90%;height:100px></textarea>
<br> &nbsp; <button id=closeExistingDivButton style='visibility:hidden' title="Close" onclick=closeExistingDiv()>cancel</button>  <button style=color:blue; onClick=insertExistingSVG()><u>insert</u></button>
</div> </TD>
 </TR></TABLE>

<div class="copy"  id=publishSVGDiv style="display:none">
<center>Download this schematic to your computer for publication in other applications.</center>
<textarea id=publishSVGValue style=width:90%;height:100px></textarea>
 <table>
    <tr>
        <td><nobr>Publish SVG As:</nobr></td>
        <td><input id="inputPublishFileNameToSaveAs" placeholder="Include your fileName.svg"></input></td>
        <td><button Title="Save current drawing to your computer" onclick="publishSvgAsFile()">send</button></td>
        <td><button id=closePublishDivButton style='visibility:hidden' title="Close" onclick=closePublishDiv()>Close</button></td>
    </tr>
 </table>
</div>
   </center>

</TD>

</TR>
</TABLE>



<center>
<div id=svgSaveDiv class="copySource" style=display:none;height:1px;overflow:auto;width:1200px;text-align:left; /></div>

  <div id=svgSourceDiv style=display:none;overflow:auto;width:1200px;text-align:left; /></div>



<p></p>

 <div style='width:100%;text-align:right' >Download SVGsidekick .zip file <a href="javascript:downloadSite()" >SVGsidekick.com Files</a></div>

<div id=emDiv></div>
</center>


</DIV>
<div id=introDiv style='position:absolute;top:40px;left:10px;width:360px;height:640px;background:#ABCDEF;border:1px solid blue;border-radius:15px;padding:10px;color:MIDNIGHTBLUE'>
<center>
<b>Create/Save/Edit SVG Drawings</b><br>
<img src="Images/intro.png" alt="Create/Save/Edit SVG Drawings" />
</center>
</div>
<div id=helpDiv style='visibility:hidden;position:absolute;top:40px;left:10px;width:360px;height:1px;background:#ABCDEF;border:1px solid blue;border-radius:15px;padding:10px;color:midnightblue;overflow:hidden'>
<table style=width:100%><td style=width:90%; align=center><h7><b>Simply Create Elegant SVG Drawings</b></h7></td><td align=right><button onclick=closeHelp()>X</button></td></table>
<br><div style=text-align:justify> Each element includes its unique pane to set &amp; edit its specific values. Click on the element's button to use its pane to create and place the element in the drawing.
 After an element is created, it can be edited by moving the cursor over the element, then <b>right-click</b> the mouse  button.
</div>
<p></p>
<b>Paths</b> - Both linear and curved paths can be created by clicking their points on the drawing. Drag any point to modify its shape.
<br>Paths can also create 3d-like stroke:
<center><img src="Images/pipe3d.png" alt="" /></center>


<p></p><b>Symbols</b> - This a list of thirty(30) polygons that can be created and placed in the drawing.
<center><img src="Images/symbols.png" alt="" /></center>

<p></p><b>Icons</b> - Over 500 icons created from groups of unicode text elements: DINGBATS, GEOMETRIC, ARROWS, MATHEMATICAL, TECHNICAL, and SYMBOLS.
<center><img src="Images/icons.png" alt="" /></center>

<p></p><b>Textures</b> - Three(3) types of pre-built patterns are available: circles, lines, and paths. The pattern is placed in either an element's fill or stroke.
<p></p><b>Gradients</b> - Radial and linear gradients can be created to be placed in either an element's fill or stroke.

<p></p> <b>Shadows</b> - Each element can be selected to include a drop-shadow.

<p></p> <b>Save/Edit SVG Drawing</b> - You may save the drawing within an .svg drawing stored on your computer. It can then be edited in the future by placing the file in the textarea, under the 'Existing SVG' selection.
<br><br><img align=left src="Images/rightClick.png" alt="" width="45" height="65" /> NOTE: Any element can be changed with  cursor over element &amp; mouse <b style=color:red>Right-Click</b>.

</div
<center>


<div id=selectDrawElemDiv style='position:fixed;top:5px;left:0px;'><b><span style=color:red>SVG</span> <span style=color:blue><i>sidekick</i></span></b> <button onClick=openHelp() style=width:20px;height:20px;border:0px;padding:0px;background:white><img src="Images/help.png" width=20 height=20 alt="" /></button> &nbsp; &nbsp; &nbsp; &nbsp;

            <button onmouseover=this.style.borderColor="lime" onmouseout=this.style.borderColor=''  id=openAddCircleButton  style=background-color:linen onClick=openAddCircleDraw()>Circles</button>
            <button onmouseover=this.style.borderColor="lime" onmouseout=this.style.borderColor=''  id=openAddEllipseButton  style=background-color:linen onClick=openAddEllipseDraw()>Ellipses</button>
            <button onmouseover=this.style.borderColor="lime" onmouseout=this.style.borderColor=''  id=openAddRectButton  style=background-color:linen onClick=openAddRectDraw()>Rectangles</button>
            <button onmouseover=this.style.borderColor="lime" onmouseout=this.style.borderColor=''  id=openAddTextButton  style=background-color:linen onClick=openAddTextDraw()>Text</button>
            <button onmouseover=this.style.borderColor="lime" onmouseout=this.style.borderColor=''  id=openAddPathButton  style=background-color:linen onClick=openAddPathDraw()>Paths</button>
            <button onmouseover=this.style.borderColor="lime" onmouseout=this.style.borderColor=''  id=openAddArcButton  style=background-color:linen onClick=openAddArcDraw()>Arcs</button>
            <button onmouseover=this.style.borderColor="lime" onmouseout=this.style.borderColor=''  id=openAddPolygonButton  style=background-color:linen onClick=openAddPolygonDraw()>Polygons</button>
            <button onmouseover=this.style.borderColor="lime" onmouseout=this.style.borderColor=''  id=openAddPgonButton  style=background-color:linen onClick=openAddPgonDraw()>Symbols</button>
            <button onmouseover=this.style.borderColor="lime" onmouseout=this.style.borderColor=''  id=openAddIconButton  style=background-color:linen onClick=openAddIconDraw()>Icons</button>
            &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<button title="Add pattern/texture fill to elements" onmouseover=this.style.borderColor="lime" onmouseout=this.style.borderColor=''  id=openAddTextureButton  style=background-color:linen onClick=openAddTexture()><i>Textures</i></button>
            <button title="" onmouseover=this.style.borderColor="lime" onmouseout=this.style.borderColor=''  id=openAddGradientButton  style=background-color:linen onClick=openAddGradient()><i>Gradients</i></button>
             &nbsp;&nbsp;
            <button title="Import image from your computer as background template" onmouseover=this.style.borderColor="lime" onmouseout=this.style.borderColor=''  id=openAddBGimageButton   style=background-color:ghostwhite onClick=openAddBGimage()   >Template Image</button>
  </div>
</center>
<div  id=elemSizeDiv
  style='box-shadow: 4px 4px 4px #888888;-webkit-box-shadow:2px 3px 4px #888888;
  font-size:80%;z-index:20;padding:4px;position:absolute;top:0px;left:0px;visibility:hidden;
  background-color:linen;border: solid 1px black;border-radius:5px;cursor:default;'>

</div>
<div id=savedTextureDiv style='padding:5px;border-radius:8px;border:2px lightblue solid;visibility:hidden;background:linen;position:fixed;top:5px;left:400px;width:800px;height:70px;overflow-y:hidden;'>
<table id=savedTextureTable ><tr align=center></tr></table>
</div>

<div style='position:fixed;top:5px;left:95%'><button onClick=zoomDrawing() title="Mousewheel Zoom Drawing" id=zoomButton style='background:transparent;border:0px;width:30px;height:30px;padding:0px'><img src="Images/zoomButton.png" width=25 height=25 /></button> <button onClick=openZoomHelp() style=width:20px;height:20px;padding:0px;border:0px;background:transparent ><img src="Images/help.png"  width=20 height=20 /></button>   </div>

<div id=zoomHelpDiv style='background:white;visibility:hidden;position:fixed;top:60px;left:70%;width:300px;height:1px;border:1px solid blue;border-radius:5px;padding:10px;overflow:hidden'>
    <table style=width:100%><td style=width:90%; align=center><h7><b>Mousewheel Zoom</b></h7></td><td align=right><button onclick=closeZoomHelp()>X</button></td></table>
    <div style=text-align:justify>

    Select this to zoom into the drawing via the mousewheel.<p></p>When zoomed you may drag/drop any element: With the cursor
    over the element<img align=center src="Images/rightClick.png" alt="" width="45" height="65" /> <b>right-click</b> the mouse button, then drag the element.
    <p></p>

    To close the Mousewheel zoom feature, click the red zoom button symbol.

      <img align=left src="Images/zoomRedButton.png" alt="" width="25" height="25" />
    </div>
</div>
</body>
<script>
function openHelp()
{
    var height=helpDiv.scrollHeight
    d3.select("#helpDiv").transition().duration(800).style("height", height+"px")
    helpDiv.style.visibility="visible"
    introDiv.style.visibility="hidden"
}
function closeHelp()
{
    var height=1
    d3.select("#helpDiv").transition().duration(800).style("height", height+"px")
    setTimeout('helpDiv.style.visibility="hidden"',900)
}
function openZoomHelp()
{
	var height=zoomHelpDiv.scrollHeight
	d3.select("#zoomHelpDiv").transition().duration(500).style("height", height+"px")
	zoomHelpDiv.style.visibility="visible"
}
function closeZoomHelp()
{
	var height=1
	d3.select("#zoomHelpDiv").transition().duration(500).style("height", height+"px")
	setTimeout('zoomHelpDiv.style.visibility="hidden"',600)
}
function svgCopy()
{
    svgSaveDiv.style.display="block"
    showSaveSVG()
}



function saveSvgAsFilexxx()
{

  if(inputFileNameToSaveAs.value!="")
  {
        showSaveSVG()
        showSourceSVG()

        var textToSave = svgSaveDiv.innerText.replace(/\\n/g,"")
        //---or use this---
        //var textToSave = new XMLSerializer().serializeToString(mySVG)

        var textToSaveAsBlob = new Blob([textToSave], {type:"text/xml"});
        var textToSaveAsURL = window.URL.createObjectURL(textToSaveAsBlob);
        var fileNameToSaveAs = document.getElementById("inputFileNameToSaveAs").value;
        if(fileNameToSaveAs.indexOf(".svg")==-1)
        fileNameToSaveAs+=".svg"
        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        downloadLink.href = textToSaveAsURL;
        downloadLink.onclick = destroyClickedElement;
        downloadLink.style.display = "none";
        document.body.appendChild(downloadLink);

        downloadLink.click();
    }
}
function destroyClickedElement(event)
{
    document.body.removeChild(event.target);
}

function clearButtonClickedxxx()
{
   closeAllFrames()

 //---retain gradients/patterns/symbols---

 for(var k=domAddPathG.childNodes.length-1;k>=0;k--)
    domAddPathG.removeChild(domAddPathG.childNodes.item(k))
 for(var k=domAddElemG.childNodes.length-1;k>=0;k--)
       domAddElemG.removeChild(domAddElemG.childNodes.item(k))
 for(var k=domAddSymbolG.childNodes.length-1;k>=0;k--)
    domAddSymbolG.removeChild(domAddSymbolG.childNodes.item(k))
        for(var k=domActiveElemG.childNodes.length-1;k>=0;k--)
        {
          if(domActiveElemG.childNodes.item(k).getAttribute("id")!="domDrawX"&&domActiveElemG.childNodes.item(k).getAttribute("id")!="dragDot")
            domActiveElemG.removeChild(domActiveElemG.childNodes.item(k))
       }
 for(var k=domAddIconG.childNodes.length-1;k>=0;k--)
    domAddIconG.removeChild(domAddIconG.childNodes.item(k))

       inputFileNameToSaveAs.value=""
       inputFileNameToSaveAs.placeholder="Include your fileName.svg"

            showSourceSVG()
            showSaveSVG()
}

//================insert/edit existing svg================

function openExistingSVG()
{
    existingSVGDiv.style.display="block"
    closeExistingDivButton.style.visibility="visible"
    existingSVGValue.focus()
}
function closeExistingDiv()
{
    existingSVGDiv.style.display="none"
    closeExistingDivButton.style.visibility="hidden"

}

function insertExistingSVGxxx()
{
    clearButtonClicked()
    var svgString=existingSVGValue.value.replace(/\\n/g,"")
    var parser = new DOMParser();
    var SVGdoc=parser.parseFromString(svgString,"text/xml").documentElement;
    var svgWidth=SVGdoc.getAttribute("width")
    var svgHeight=SVGdoc.getAttribute("height")
    svgWidthValue.value=svgWidth
    svgHeightValue.value=svgHeight
    svgDiv.style.width=svgWidth+"px"
    svgDiv.style.height=svgHeight+"px"
    mySVG.setAttribute("width",svgWidth)
    mySVG.setAttribute("height",svgHeight)
    mySVG.setAttribute("viewBox", "0 0 "+svgWidth+" "+svgHeight)
    createGridLayer()

	var zooomG=SVGdoc.getElementsByTagName("g")[0]
	for(var k=0;k<SVGdoc.childNodes.length;k++)
	{
		var elem=SVGdoc.childNodes.item(k)
		if(elem.nodeName!="#text")
		{
			if(elem.id=="arrowDefs")
			{
				var arrows=elem.childNodes
				for(var a=0;a<arrows.length;a++)
				if(arrows.item(a).nodeName!="#text")
					arrowDefs.appendChild(arrows.item(a).cloneNode(true))
			}
			if(elem.id=="defsPattern")
			{
				var patterns=elem.childNodes
				for(var a=0;a<patterns.length;a++)
				if(patterns.item(a).nodeName!="#text")
					defsPattern.appendChild(patterns.item(a).cloneNode(true))
			}
			if(elem.id=="defsGradient")
			{
				var gradients=elem.childNodes
				for(var a=0;a<gradients.length;a++)
				if(gradients.item(a).nodeName!="#text")
					defsGradient.appendChild(gradients.item(a).cloneNode(true))
			}
		}
	}
	for(var m=0;m<zooomG.childNodes.length;m++)
	{
		var elem=zooomG.childNodes.item(m)
		if(elem.nodeName!="#text")
		{
			if(elem.id=="topG")
			{
				elem.setAttribute("pointer-events","none")
				for(var z=0;z<elem.childNodes.length;z++)
				{
					var elz=elem.childNodes.item(z)
					if(elz.nodeName!="#text")
					{
						if (elz.id=="domAddPathG")
						{
							var pathG = elz
							for(var p = 0; p<pathG.childNodes.length; p++)
							{
								if(pathG.childNodes.item(p).nodeName!="#text")
								{
									var pathId="path"+p
									pathG.childNodes.item(p).setAttribute("id",pathId)
									pathG.childNodes.item(p).setAttribute("onmousedown","startPathDrawEdit("+pathId+",evt)");
									domAddPathG.appendChild(pathG.childNodes.item(p).cloneNode(true))
								}
							}
						}
						else if(elz.id=="domAddElemG")
						{
							var elemG =elz
							for(var e = 0; e<elemG.childNodes.length; e++)
							{
								var el=elemG.childNodes.item(e)
								if(el.nodeName!="#text")
								{
									 if(el.nodeName=="circle")
									 {
									     var id="circle"+e
									     el.setAttribute("id",id)
									     el.setAttribute("onmousedown","editCircleDraw("+id+",evt)");
									     domAddElemG.appendChild(el.cloneNode("true"))
									 }
									 if(el.nodeName=="polygon")
									 {
									     var id="polygon"+e
									     el.setAttribute("id",id)
									     el.setAttribute("onmousedown","editPolygonDraw("+id+",evt)");
									     domAddElemG.appendChild(el.cloneNode("true"))
									 }
									 if(el.nodeName=="ellipse")
									 {
									     var id="ellipse"+e
									     el.setAttribute("id",id)
									     el.setAttribute("onmousedown","editEllipseDraw("+id+",evt)");
									     domAddElemG.appendChild(el.cloneNode("true"))
									 }
									 if(el.nodeName=="rect")
									 {
									     var id="rect"+e
									     el.setAttribute("id",id)
									     el.setAttribute("onmousedown","editRectDraw("+id+",evt)");
									     domAddElemG.appendChild(el.cloneNode("true"))
									 }
									 if(el.nodeName=="text")
									 {
									     var id="text"+e
									     el.setAttribute("id",id)
									     el.setAttribute("onmousedown","editTextDraw("+id+",evt)");
									     domAddElemG.appendChild(el.cloneNode("true"))
									 }
								}
							}
						}
					}
				}
			} //---topG---
			if(elem.id=="domAddSymbolG")
			{
				for(var p = 0; p<elem.childNodes.length; p++)
				{
					var el=elem.childNodes.item(p)
					if(el.nodeName!="#text")
					{
						var id="symbol"+p
						el.setAttribute("id",id)
						el.setAttribute("class","dragTargetObj")
						el.setAttribute("onmousedown","editPgonStart(evt)");
						domAddSymbolG.appendChild(el.cloneNode(true))
					}
				}
			}
			if(elem.id=="domAddIconG")
			{
				for(var p = 0; p<elem.childNodes.length; p++)
				{
					var el=elem.childNodes.item(p)
					if(el.nodeName!="#text")
					{
						var id="icon"+p
						el.setAttribute("id",id)
						el.setAttribute("class","dragTargetObj")
						el.setAttribute("onmousedown","editIconStart(evt)");
						domAddIconG.appendChild(el.cloneNode(true))
					}
				}
			}


		}//---#text
	} //---zoomG---

    closeExistingDiv()
    showSourceSVG()
    showSaveSVG()
}
function zzzinsertExistingSVG()
{
    if(existingSVGValue.value!="")
    {
    clearButtonClicked()
    var svgString=existingSVGValue.value.replace(/\\n/g,"")


    var parser = new DOMParser();
    var SVGdoc=parser.parseFromString(svgString,"text/xml").documentElement;
    var svgWidth=SVGdoc.getAttribute("width")
    var svgHeight=SVGdoc.getAttribute("height")
    svgWidthValue.value=svgWidth
    svgHeightValue.value=svgHeight
    svgDiv.style.width=svgWidth+"px"
    svgDiv.style.height=svgHeight+"px"
    mySVG.setAttribute("width",svgWidth)
    mySVG.setAttribute("height",svgHeight)
    mySVG.setAttribute("viewBox", "0 0 "+svgWidth+" "+svgHeight)
    createGridLayer()

    for(var k=0;k<SVGdoc.childNodes.length;k++)
    {
        var elem=SVGdoc.childNodes.item(k)
        if(elem.nodeName!="#text")
        {
            if(elem.id=="arrowDefs")
            {
               var arrows=elem.childNodes
               for(var a=0;a<arrows.length;a++)
               if(arrows.item(a).nodeName!="#text")
                arrowDefs.appendChild(arrows.item(a).cloneNode(true))
            }
            if(elem.id=="defsPattern")
            {
               var patterns=elem.childNodes
               for(var a=0;a<patterns.length;a++)
               if(patterns.item(a).nodeName!="#text")
                defsPattern.appendChild(patterns.item(a).cloneNode(true))
            }
            if(elem.id=="defsGradient")
            {
               var gradients=elem.childNodes
               for(var a=0;a<gradients.length;a++)
               if(gradients.item(a).nodeName!="#text")
                defsGradient.appendChild(gradients.item(a).cloneNode(true))
            }

            if(elem.id=="topG")
            {
                elem.setAttribute("pointer-events","none")

            for(var z=0;z<elem.childNodes.length;z++)
            {
                var elz=elem.childNodes.item(z)
                if(elz.nodeName!="#text")
                {
                  if (elz.id=="domAddPathG")
                   {
                        var pathG = elz

                        for(var p = 0; p<pathG.childNodes.length; p++)
                        {
                            if(pathG.childNodes.item(p).nodeName!="#text")
                            {
                              var pathId="path"+p
                             pathG.childNodes.item(p).setAttribute("id",pathId)
                            pathG.childNodes.item(p).setAttribute("onmousedown","startPathDrawEdit("+pathId+",evt)");
                            domAddPathG.appendChild(pathG.childNodes.item(p).cloneNode(true))
                           }
                        }
                   }
                   else if(elz.id=="domAddElemG")
                   {
                        var elemG =elz
                         for(var e = 0; e<elemG.childNodes.length; e++)
                        {
                            var el=elemG.childNodes.item(e)
                            if(el.nodeName!="#text")
                            {
                                if(el.nodeName=="circle")
                                {
                                    var id="circle"+e
                                    el.setAttribute("id",id)
                                    el.setAttribute("onmousedown","editCircleDraw("+id+",evt)");
                                    domAddElemG.appendChild(el.cloneNode("true"))
                                }
                                if(el.nodeName=="polygon")
                                {
                                    var id="polygon"+e
                                    el.setAttribute("id",id)
                                    el.setAttribute("onmousedown","editPolygonDraw("+id+",evt)");
                                    domAddElemG.appendChild(el.cloneNode("true"))
                                }
                                if(el.nodeName=="ellipse")
                                {
                                    var id="ellipse"+e
                                    el.setAttribute("id",id)
                                    el.setAttribute("onmousedown","editEllipseDraw("+id+",evt)");
                                    domAddElemG.appendChild(el.cloneNode("true"))


                                }
                                if(el.nodeName=="rect")
                                {

                                    var id="rect"+e
                                    el.setAttribute("id",id)
                                    el.setAttribute("onmousedown","editRectDraw("+id+",evt)");
                                    domAddElemG.appendChild(el.cloneNode("true"))

                                }
                                if(el.nodeName=="text")
                                {
                                    var id="text"+e
                                    el.setAttribute("id",id)
                                    el.setAttribute("onmousedown","editTextDraw("+id+",evt)");
                                    domAddElemG.appendChild(el.cloneNode("true"))

                                }
                            }
                      }

                    }
                }
                }
            }

            if(elem.id=="domAddSymbolG")
            {
                for(var p = 0; p<elem.childNodes.length; p++)
                {
                    var el=elem.childNodes.item(p)
                    if(el.nodeName!="#text")
                    {
                          var id="symbol"+p
                         el.setAttribute("id",id)
                         el.setAttribute("class","dragTargetObj")

                        el.setAttribute("onmousedown","editPgonStart(evt)");
                        domAddSymbolG.appendChild(el.cloneNode(true))
                    }
                }
            }
             if(elem.id=="domAddIconG")
            {
                for(var p = 0; p<elem.childNodes.length; p++)
                {
                    var el=elem.childNodes.item(p)
                    if(el.nodeName!="#text")
                    {
                          var id="icon"+p
                         el.setAttribute("id",id)
                         el.setAttribute("class","dragTargetObj")


                        el.setAttribute("onmousedown","editIconStart(evt)");
                        domAddSymbolG.appendChild(el.cloneNode(true))
                    }
                }
            }

        }
    }

    closeExistingDiv()
    showSourceSVG()
    showSaveSVG()
    }
}
document.addEventListener("onload",init(),false)
function init()
{
    initD3Svg()
    createGridLayer()
    startCursorLoc()
  // showSourceSVG()
  //  showSaveSVG()
    writeEM()

   $(".copy").children().bind('contextmenu', function(e){
       e.stopPropagation();
   });
   $(".copySource").bind('contextmenu', function(e){
       e.stopPropagation();
   });


       d3.select("#textSVG").transition().duration(5000).attr("opacity",0)
    setTimeout('mySVG.removeChild(textSVG)',5000)

}
function setSVGSizeButtonClicked()
{

    var svgWidth=svgWidthValue.value
    var svgHeight=svgHeightValue.value
    svgDiv.style.width=svgWidth+"px"
    svgDiv.style.height=svgHeight+"px"
    mySVG.setAttribute("width",svgWidth)
    mySVG.setAttribute("height",svgHeight)
    mySVG.setAttribute("viewBox", "0 0 "+svgWidth+" "+svgHeight)
    createGridLayer()


    showSourceSVG()
    showSaveSVG()

}

document.addEventListener('contextmenu', event => event.preventDefault());

function writeEM()
{
   var em="Contact: "
    em+="fhem"
    em+="sher"
    em+="@"
    em+="gm"
    em+="ail."
    em+="com"
   emDiv.innerHTML=em +" &nbsp;&nbsp;<span style=color:blue>Last Update: 8/08/2018</span>"

}
function downloadSite()
{

var zip_file_path = "SiteZip/SVGsidekick.zip"
var zip_file_name = "SVGsidekickSite"
var a = document.createElement("a");
document.body.appendChild(a);
a.style = "display: none";
a.href = zip_file_path;
a.download = zip_file_name;
a.click();
document.body.removeChild(a);

}

</script>


</html>